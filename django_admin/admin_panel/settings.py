"""
Django settings for admin_panel project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import logging
from datetime import datetime

from dotenv import load_dotenv
from shortuuid import ShortUUID



try:
    from bitrix24 import Bitrix24
except ImportError:
    pass

try:
    from tbank_kassa_api.tbank_client import TClient
except ImportError:
    pass

from telebot import TeleBot

from redis import Redis



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(BASE_DIR/".env")

BITRIX_OUT = os.environ.get("BITRIX_OUT")
BITRIX_IN = os.environ.get("BITRIX_IN")

SHOTRNUMBERS_UUID = ShortUUID("0123456789")

BITRIX = None
try:
    BITRIX = Bitrix24(BITRIX_OUT)
except Exception as ex:
    print(ex)


TBANK_TERMINAL_ID = os.environ.get("TBANK_TERMINAL_ID")
TBANK_TERMINAL_PASSWORD = os.environ.get("TBANK_TERMINAL_PASSWORD")
TBANK_CLIENT = None

try:
    TBANK_CLIENT = TClient(TBANK_TERMINAL_ID, TBANK_TERMINAL_PASSWORD)
except Exception as ex:
    print(ex)

TELEGRAM_BOT = TeleBot(os.environ.get("TELEGRAM_BOT"))

SITE_HOST = os.environ.get("SITE_HOST")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY_DJANGO")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(os.environ.get("DEBUG", default=0))

ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS", default='localhost').split(" ")
ENV_CSRF_TRUSTED_ORIGINS = os.environ.get("CSRF_TRUSTED_ORIGINS", default=[])
CSRF_TRUSTED_ORIGINS = ENV_CSRF_TRUSTED_ORIGINS
if ENV_CSRF_TRUSTED_ORIGINS:
    CSRF_TRUSTED_ORIGINS = ENV_CSRF_TRUSTED_ORIGINS.split(" ")



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "model_place.apps.ModelPlaceConfig",
    "bot_settings.apps.BotSettingsConfig"
]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        "file": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": os.path.join(BASE_DIR, f"loggs/devlog_django{datetime.now().strftime('%d-%m-%Y')}.log"),
        },
    },
    "loggers": {
        "model_place": {
            "handlers": ["file"],
            "level": "INFO",
            "propagate": True
        }
    }
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'admin_panel.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'admin_panel.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
#'django.db.backends.postgresql',
DB_ENGINE = os.environ.get('DB_ENGINE')
DB_NAME = os.environ.get('DB_NAME')
DB_USER = os.environ.get('DB_USER')
DB_PASSWORD = os.environ.get('DB_PASSWORD')
DB_HOST =  os.environ.get('DB_HOST')

DATABASE_CONFIG = {
    "default": {
        "ENGINE" : DB_ENGINE,
    }
}

if DB_ENGINE.split(".")[-1] == "sqlite3":
    DATABASE_CONFIG["default"]["NAME"] = BASE_DIR / DB_NAME

else:
    DATABASE_CONFIG["default"]['NAME'] = DB_NAME
    DATABASE_CONFIG["default"]['USER'] = DB_USER
    DATABASE_CONFIG["default"]['PASSWORD'] = DB_PASSWORD
    DATABASE_CONFIG["default"]['HOST'] = DB_HOST

DATABASES = DATABASE_CONFIG


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = os.environ.get('LANG_CODE', default="en-us")

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles/')
STATIC_URL = 'static/'
print(STATIC_ROOT)


MEDIA_ROOT = os.path.join(BASE_DIR, 'mediafiles/')
MEDIA_URL = 'media/'


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REDIS_HOST = os.environ.get("REDIS_HOST")
REDIS_PORT = os.environ.get("REDIS_PORT")

REDIS_CLIENT = Redis(
    host=REDIS_HOST,
    port=REDIS_PORT
)