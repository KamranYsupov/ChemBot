# Generated by Django 5.0 on 2024-02-25 15:37

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AreaGroups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=55, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Группа областей',
                'verbose_name_plural': 'Группы областей',
                'db_table': 'area_groups',
            },
        ),
        migrations.CreateModel(
            name='Basket',
            fields=[
                ('uuid', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('old', models.BooleanField(default=False, verbose_name='Старый')),
            ],
            options={
                'verbose_name': 'Корзина',
                'verbose_name_plural': 'Корзины',
                'db_table': 'basket',
            },
        ),
        migrations.CreateModel(
            name='ItemTypes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=55, verbose_name='Тип товара')),
            ],
            options={
                'verbose_name': 'Тип товара',
                'verbose_name_plural': 'Типы товаров',
                'db_table': 'item_types',
            },
        ),
        migrations.CreateModel(
            name='Mailings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='Содержание')),
                ('image', models.ImageField(blank=True, null=True, upload_to='mailings/', verbose_name='Изображение')),
                ('video', models.FileField(blank=True, null=True, upload_to='mailings/', verbose_name='Видео')),
                ('mail_date', models.DateField(verbose_name='Дата рассылки')),
                ('mail_time', models.TimeField(verbose_name='Время рассылки')),
                ('it_send', models.BooleanField(default=False, verbose_name='Рассылка отправлена')),
            ],
            options={
                'verbose_name': 'рассылки',
                'verbose_name_plural': 'Рассылки',
                'db_table': 'mailings',
            },
        ),
        migrations.CreateModel(
            name='Services',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120, verbose_name='Название')),
                ('price', models.DecimalField(decimal_places=2, default=0, editable=False, max_digits=10, verbose_name='Цена')),
            ],
            options={
                'verbose_name': 'Доп Услуга',
                'verbose_name_plural': 'Доп Услуги',
                'db_table': 'services',
            },
        ),
        migrations.CreateModel(
            name='TelegramUsers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telegram_id', models.BigIntegerField(unique=True)),
                ('fio', models.CharField(max_length=550, verbose_name='ФИО')),
                ('phone', models.CharField(max_length=555, verbose_name='Телефон')),
                ('email', models.CharField(default=None, max_length=555, null=True, verbose_name='Email')),
                ('subscription', models.BooleanField(default=False, verbose_name='Подписка')),
                ('bitrix_contact_id', models.BigIntegerField(default=None, null=True, unique=True)),
            ],
            options={
                'verbose_name': 'Пользователь Telegram',
                'verbose_name_plural': 'Пользователи Telegram',
                'db_table': 'telegram_users',
            },
        ),
        migrations.CreateModel(
            name='AreaSubgroups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=55, verbose_name='Название')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_subgroups', to='model_place.areagroups', verbose_name='Группа')),
            ],
            options={
                'verbose_name': 'Подгруппа областей',
                'verbose_name_plural': 'Подгруппы областей',
                'db_table': 'area_subgroups',
            },
        ),
        migrations.CreateModel(
            name='ReceptionPoints',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=55, verbose_name='Название')),
                ('link', models.URLField(max_length=2055, verbose_name='Ссылка')),
                ('area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reception_points_area', to='model_place.areasubgroups', verbose_name='Область')),
            ],
            options={
                'verbose_name': 'Пункт приема',
                'verbose_name_plural': 'Пункты приема',
                'db_table': 'reception_points',
            },
        ),
        migrations.CreateModel(
            name='ItemsServices',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='model_place.itemtypes')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='model_place.services')),
            ],
            options={
                'verbose_name': 'Предмет-Доп.услуга',
                'verbose_name_plural': 'Предметы-Доп.услуги',
                'db_table': 'items_services',
            },
        ),
        migrations.CreateModel(
            name='Orders',
            fields=[
                ('uuid', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('short_uuid', models.CharField(blank=True, editable=False, max_length=40, null=True, verbose_name='Короткий идентификатор')),
                ('request_number', models.CharField(blank=True, max_length=255, null=True, verbose_name='Номер заявки')),
                ('amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Сумма')),
                ('additional_amount', models.DecimalField(blank=True, decimal_places=2, default=0, editable=False, max_digits=10, null=True, verbose_name='Доп.сумма')),
                ('order_status', models.CharField(max_length=255, verbose_name='Статус заказа')),
                ('paid_for', models.BooleanField(default=False, verbose_name='Оплачен')),
                ('ready_issued', models.BooleanField(default=False, verbose_name='Готов к выдаче')),
                ('complete', models.BooleanField(default=False, verbose_name='Завершен')),
                ('plomb_photo', models.ImageField(blank=True, null=True, upload_to='orders/', verbose_name='Изображение пломбы')),
                ('plomb_data', models.TextField(blank=True, null=True, verbose_name='Данные пломбы')),
                ('order_data', models.TextField(blank=True, null=True, verbose_name='Данные заказа')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('basket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='basket_orders', to='model_place.basket', verbose_name='Корзина')),
                ('issued_point', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='issued_point_orders', to='model_place.receptionpoints', verbose_name='Точка выдачи')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_orders', to='model_place.telegramusers', verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Заказ',
                'verbose_name_plural': 'Заказы',
                'db_table': 'orders',
            },
        ),
        migrations.AddField(
            model_name='basket',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_basket', to='model_place.telegramusers', verbose_name='Пользователь'),
        ),
        migrations.CreateModel(
            name='UserItems',
            fields=[
                ('uuid', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('count', models.IntegerField(default=1, verbose_name='Количество')),
                ('old', models.BooleanField(default=False, verbose_name='Старый')),
                ('basket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='basket_items', to='model_place.basket', verbose_name='Корзина')),
                ('item_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='item_type_items', to='model_place.itemtypes', verbose_name='Тип товара')),
                ('point', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='points_items', to='model_place.receptionpoints', verbose_name='Сервис')),
                ('service', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='services_items', to='model_place.services', verbose_name='Сервис')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_items', to='model_place.telegramusers', verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Товар пользователя',
                'verbose_name_plural': 'Товары пользователей',
                'db_table': 'user_items',
            },
        ),
    ]
